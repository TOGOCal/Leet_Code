public class p137 {

    /**
     * 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。
     * 请你找出并返回那个只出现了一次的元素
     * 你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。
     */

    /**
     * 设计数据门电路
     * 每个位数加起来要么是0，要吗是3的倍数
     * <p>
     * 由此可以设计数字门电路：
     * 00 -> 01 - > 10 这样的变化规律
     * 并使用两个整数进行存储
     * 0 -> 0 -> 1  第一个整数 numH
     * 0    1    0  第二个整数 numL
     * <p>
     * 计算规则：当numH为1的时候，遇到0还是1 ， 遇到1就是0
     * 使用 numL & num 判断进位
     * numH ^ 进位
     * <p>
     * 新加入的数字 与 低位数字 异或这个数
     * 当numL为1的时候，将这一位置0，将高位置一
     * 为0，直接置位为1
     * 所以numL直接异或就行了
     */

    class Solution {
        public int singleNumber(int[] nums) {
            int a = 0, b = 0;
            for (int num : nums) {
                b = ~a & (b ^ num);
                a = ~b & (a ^ num);
            }
            return b;
        }
    }
}
